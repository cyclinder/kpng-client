apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  labels:
    app: kpng
  name: kpng
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: kpng
  template:
    metadata:
      labels:
        app: kpng
    spec:
      # to enable progressive deployment on existing cluster you can use node labels:
      #nodeSelector:
      #  kpng: kpng
      serviceAccountName: kube-proxy
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      # so that kpng always runs on the controlplane nodes...
      tolerations:
      - operator: "Exists"
        effect: "NoSchedule"
      containers:
      # only spin up bptools image if ebpf is the selected backend.
      - image: cyclinder/kpng-0724:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
          value: warn
        name: kpng
        volumeMounts:
        - name: kpng-sock
          mountPath: /k8s
        - mountPath: /var/lib/kpng
          name: kpng-config
        args:
        - kube
        - --kubeconfig=/var/lib/kpng/kubeconfig.conf
        - to-api
        - --listen=unix:///k8s/proxy.sock
      - image: cyclinder/kpng-0724:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
          value: warn
        name: kpng-iptables
        securityContext:
            privileged: true
        volumeMounts:
        - name: kpng-sock
          mountPath: /k8s
        - name: modules
          mountPath: /lib/modules
          readOnly: true
        args: [ "local", "--api=unix:///k8s/proxy.sock", "to-${BACKEND}" ]
        #- --dry-run
      volumes:
      - name: modules
        hostPath:
          path: /lib/modules
      - name: kpng-config
        configMap:
          name: kpng
      - name: kpng-sock
        hostPath:
          path: /var/lib/kpng
          type: DirectoryOrCreate